{"remainingRequest":"C:\\Users\\SL\\Desktop\\greatest-books\\greatest-books\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\SL\\Desktop\\greatest-books\\greatest-books\\node_modules\\rxjs\\_esm5\\internal\\observable\\fromPromise.js","dependencies":[{"path":"C:\\Users\\SL\\Desktop\\greatest-books\\greatest-books\\node_modules\\rxjs\\_esm5\\internal\\observable\\fromPromise.js","mtime":1532245668140},{"path":"C:\\Users\\SL\\Desktop\\greatest-books\\greatest-books\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1532245579180},{"path":"C:\\Users\\SL\\Desktop\\greatest-books\\greatest-books\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1532245544624}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START _Observable,_Subscription,_util_subscribeToPromise PURE_IMPORTS_END */\n/** PURE_IMPORTS_START _Observable,_Subscription,_util_subscribeToPromise PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { subscribeToPromise } from '../util/subscribeToPromise';\nexport function fromPromise(input, scheduler) {\n    if (!scheduler) {\n        return new Observable(subscribeToPromise(input));\n    }\n    else {\n        return new Observable(function (subscriber) {\n            var sub = new Subscription();\n            sub.add(scheduler.schedule(function () {\n                return input.then(function (value) {\n                    sub.add(scheduler.schedule(function () {\n                        subscriber.next(value);\n                        sub.add(scheduler.schedule(function () { return subscriber.complete(); }));\n                    }));\n                }, function (err) {\n                    sub.add(scheduler.schedule(function () { return subscriber.error(err); }));\n                });\n            }));\n            return sub;\n        });\n    }\n}\n//# sourceMappingURL=fromPromise.js.map\n",null]}